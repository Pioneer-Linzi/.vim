" nerdtree key map
if isdirectory(expand("~/.vim/vimfiles/bundle/nerdtree"))
	map <C-e>  :NERDTreeToggle <CR>
	map <leader>e :NERDTreeFind <CR>
	nmap <leader>nt :NERDTreeFind <CR>

	let NERDTreeShowBookmarks=1
	let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
	let NERDTreeChDirMode=0
	let NERDTreeQuitOnOpen=1
	let NERDTreeMouseMode=2
	let NERDTreeShowHidden=1
	let NERDTreeKeepTreeInNewTab=1
	let g:nerdtree_tabs_open_on_gui_startup=0
endif


" solarized
if !exists('g:override_spf13_bundles') && filereadable(expand("$VIM/vimfiles/bundle/vim-colors-solarized/colors/solarized.vim"))
	let g:solarized_termcolors=256
	let g:solarized_termtrans=1
	let g:solarized_contrast="normal"
	let g:solarized_visibility="normal"
	color solarized             " Load a colorscheme
endif

" css
augroup VimCSS3Syntax
	autocmd!

	autocmd FileType css setlocal iskeyword+=-
augroup END


" ctrlp
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

"airline
"---------------alrLine Config--------------
let g:airline_theme = 'solarized'
set t_Co=256
let g:airline_powerline_fonts = 1
"powerline symbols
if !exists('g:airline_symbols')
	let g:airline_symbols = {}
endif
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = '⭤'
let g:airline_symbols.linenr = ''

" supertab
" Enable Omni complate
set omnifunc=syntaxcomplete#Complete
autocmd FileType *
			\ if &omnifunc != '' |
			\   call SuperTabChain(&omnifunc, "<c-p>") |
			\   call SuperTabSetDefaultCompletionType("<c-x><c-u>") |
			\ endif

"js
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:syntastic_javascript_checkers=['eslint']

"---------------------TaskList------------------------------
" tasklist.vim  任务列表插件
let g:tlTokenList = ["FIXME", "TODO", "HACK", "NOTE", "WARN", "MODIFY"]

" 绑定快捷键，默认是 <Leader>t
nnoremap ,td :TaskList <CR>
" 显示的位置，0在top 1 在bottom
let g:tlWindowPosition = 1
" workspace
" let g:workspace_autosave_always = 1

"-------------------undo------------------------------------
nnoremap <F5> :UndotreeToggle <cr>

"------------------indentLine-------------------------------
"indentLine 代码缩进线标志线
let g:indentLine_char = '¦'
let g:indentLine_color_term = 239
"映射到ctrl+i键
map <C-i> :IndentLinesToggle <CR>


"-------------------syntastic----------------------------------
" ###### 多语言语法检查
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
" 检测到错误和警告时的标志
let g:syntastic_error_symbol='✘✘'
let g:syntastic_warning_symbol='➤➤'
let g:syntastic_check_on_open=1
let g:syntastic_check_on_wq=0
let g:syntastic_enable_highlighting=1
" 使用pyflakes,速度比pylint快
" 需要安装 pep8 或者 pyflakes，使用pip安装  ,pep8是python的格式检测神器，建议安装。
let g:syntastic_python_checkers=['pep8', 'pyflakes']
let g:syntastic_python_pep8_args='--ignore=E501,E225'
" 修改高亮的背景色, 适应主题
highlight SyntasticErrorSign guifg=white guibg=black
" to see error location list
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_loc_list_height = 5
function! ToggleErrors()
	let old_last_winnr = winnr('$')
	lclose
	if old_last_winnr == winnr('$')
		" Nothing was closed, open syntastic error location panel
		Errors
	endif
endfunction
nnoremap <Leader>s :call ToggleErrors() <cr>
" 跳转到下一个/上一个错误处
nnoremap <Leader>sn :lnext <cr>
nnoremap <Leader>sp :lprevious <cr>
" 关闭 某一语言的（如C/C++） 的语法检测
" let g:syntastic_ignore_files=[".*\.c$", ".*\.h$", ".*\.cpp", ".*\.hpp"]




"---------------------------vim  easy align -------------------------
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga :EasyAlign

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga :EasyAlign


"------------------------------js beautify------------------------------
map  :call JsBeautify()
" or
autocmd FileType javascript noremap  :call JsBeautify()
" for html
autocmd FileType html noremap  :call HtmlBeautify()
" for css or scss
autocmd FileType css noremap  :call CSSBeautify()

"-----------------------------markdown-----------------------------------
let g:vim_markdown_folding_disabled = 1
