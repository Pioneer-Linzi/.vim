" [> NERDTree <]

" on vim enter opens nerd tree
function! OpenNerdTree()
    let s:exclude = ['COMMIT_EDITMSG', 'MERGE_MSG']
    if index(s:exclude, expand('%:t')) < 0
        NERDTreeFind
        exec "normal! \<c-w>\<c-w>"
    endif
endfunction
autocmd VimEnter * call OpenNerdTree()


" nerdtree window resize
let g:NERDTreeWinSize = 35

" show hidden files
let g:NERDTreeShowHidden=1

" single click to open nodes
" let g:NERDTreeMouseMode=3

" ignored files
let g:NERDTreeIgnore=['\.swp$', '\~$']
nnoremap <c-n> :NERDTreeToggle<cr>

" helps quiting when there's no buffers left but NerdTree
function! CheckLeftBuffers()
  if tabpagenr('$') == 1
    let i = 1
    while i <= winnr('$')
      if getbufvar(winbufnr(i), '&buftype') == 'help' ||
          \ getbufvar(winbufnr(i), '&buftype') == 'quickfix' ||
          \ exists('t:NERDTreeBufName') &&
          \   bufname(winbufnr(i)) == t:NERDTreeBufName ||
          \ bufname(winbufnr(i)) == '__Tag_List__'
        let i += 1
      else
        break
      endif
    endwhile
    if i == winnr('$') + 1
      qall
    endif
    unlet i
  endif
endfunction
autocmd BufEnter * call CheckLeftBuffers()
"---------------pagecolor-----------------------
set background=dark
set t_Co=256
colorscheme PaperColor



"----------------------------快速注释---------------------------

noremap <c-_> :call NERDComment(0, "Toggle")<cr>


" ctrlp
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'



" [> Airline <]

" status line always opened
set laststatus=2

let g:airline#extensions#tabline#enabled = 1


"  powerline font
let g:airline_powerline_fonts=1

let g:airline_theme='PaperColor'

"powerline symbols
if !exists('g:airline_symbols')
	let g:airline_symbols = {}
endif
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = '⭤'
let g:airline_symbols.linenr = ''

" supertab
" Enable Omni complate
set omnifunc=syntaxcomplete#Complete
autocmd FileType *
			\ if &omnifunc != '' |
			\   call SuperTabChain(&omnifunc, "<c-p>") |
			\   call SuperTabSetDefaultCompletionType("<c-x><c-u>") |
			\ endif

"js
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:syntastic_javascript_checkers=['eslint']

"vue
autocmd FileType vue syntax sync fromstart
let g:vue_disable_pre_processors=1



"---------------------TaskList------------------------------
" tasklist.vim  任务列表插件
let g:tlTokenList = ["FIXME", "TODO", "HACK", "NOTE", "WARN", "MODIFY"]

" 绑定快捷键，默认是 <Leader>t
nnoremap ,td :TaskList <CR>
" 显示的位置，0在top 1 在bottom
let g:tlWindowPosition = 1
" workspace
" let g:workspace_autosave_always = 1

"-------------------undo------------------------------------
nnoremap <F5> :UndotreeToggle <cr>

"-------------------syntastic----------------------------------
" ###### 多语言语法检查
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
" 检测到错误和警告时的标志
let g:syntastic_error_symbol='✘✘'
let g:syntastic_warning_symbol='➤➤'
let g:syntastic_check_on_open=1
let g:syntastic_check_on_wq=0
let g:syntastic_enable_highlighting=1
" 使用pyflakes,速度比pylint快
" 需要安装 pep8 或者 pyflakes，使用pip安装  ,pep8是python的格式检测神器，建议安装。
let g:syntastic_python_checkers=['pep8', 'pyflakes']
let g:syntastic_python_pep8_args='--ignore=E501,E225'
" 修改高亮的背景色, 适应主题
highlight SyntasticErrorSign guifg=white guibg=black
" to see error location list
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_loc_list_height = 5
function! ToggleErrors()
	let old_last_winnr = winnr('$')
	lclose
	if old_last_winnr == winnr('$')
		" Nothing was closed, open syntastic error location panel
		Errors
	endif
endfunction
nnoremap <Leader>s :call ToggleErrors() <cr>
" 跳转到下一个/上一个错误处
nnoremap <Leader>sn :lnext <cr>
nnoremap <Leader>sp :lprevious <cr>
" 关闭 某一语言的（如C/C++） 的语法检测
" let g:syntastic_ignore_files=[".*\.c$", ".*\.h$", ".*\.cpp", ".*\.hpp"]

"---------------------------vim  easy align -------------------------
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga :EasyAlign

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga :EasyAlign

"------------------------------js beautify------------------------------
map  :call JsBeautify()
" or
autocmd FileType javascript noremap  :call JsBeautify()
" for html
autocmd FileType html noremap  :call HtmlBeautify()
" for css or scss
autocmd FileType css noremap  :call CSSBeautify()

"-----------------------------markdown-----------------------------------
let g:vim_markdown_folding_disabled = 1
let g:mkdp_path_to_chrome = "open -a Google\\ Chrome"
nmap <silent> <F8> <Plug> MarkdownPreview        " for normal mode
imap <silent> <F8> <Plug> MarkdownPreview        " for insert mode
nmap <silent> <F9> <Plug> StopMarkdownPreview    " for normal mode
imap <silent> <F9> <Plug> StopMarkdownPreview    " for insert mode
